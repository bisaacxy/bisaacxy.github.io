<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[云塘食客]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-11-28T11:41:25.136Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Isaac]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[看了火星救援]]></title>
    <link href="http://yoursite.com/2015/11/28/post/"/>
    <id>http://yoursite.com/2015/11/28/post/</id>
    <published>2015-11-28T09:52:35.000Z</published>
    <updated>2015-11-28T11:41:25.136Z</updated>
    <content type="html"><![CDATA[<p>趁着周五没课马上跑去看，好早之前就听说火星救援的宣传和评价如何如何好，是一部硬科幻电影，我这种半吊子科幻迷自然也是感兴趣很久了，然后闲逛亚马逊的时候想着不如把原著先看了吧（埋下了坑），于是就买了<a href="http://www.amazon.cn/%E7%81%AB%E6%98%9F%E6%95%91%E6%8F%B4-%EF%BC%BB%E7%BE%8E%E5%9B%BD%EF%BC%BD%E5%AE%89%E8%BF%AA%C2%B7%E5%A8%81%E5%B0%94/dp/B0154K86WY/ref=sr_1_1?ie=UTF8&amp;qid=1448706762&amp;sr=8-1&amp;keywords=%E7%81%AB%E6%98%9F%E6%95%91%E6%8F%B4+kindle" title="火星救援的Kindle电子书" target="_blank" rel="external">火星救援的的kindle电子书</a>（10块原价还是略贵啊，电影上映都不打个折），看了三天就看完了，整体来说小说不长，不过如果对于一些基本科学概念不清楚的话可能稍微费点力气吧，看完电影和书的感觉就是这确实是一本够硬的科幻作品，在微博上也看到了对作者的介绍，想不到竟然参加了魔兽争霸2的开发！+10分！<br><a id="more"></a><br>说回到故事情节，一开始我只知道主角被丢在了火星，自然而然让我联想到了Lifeline这个游戏，话说当初这个游戏我玩到后面就没有等泰勒的busy时间了。。。直接各种跳过等待，快速读完了游戏，都是主角一人被独自丢在了外星球，Lifeline里还有异形生物，“幻”的程度要更深些啊，火星救援里主角待得时间更久，要解决水、空气、食物这些基本问题，还要想着怎么去能够让自己获救的地点，比如去阿瑞斯4号的MAV的距离是3200km,看到这个距离我真觉得靠着那小漫游车有点捉急。不过更加喜欢马克，因为泰勒的所有决定都要玩家来做，马克作为电影主角主动性就强很多了，感觉专业素质也要强啊，他就是嘴上喊着卧槽，其实挺冷静的处理各种问题，最终一个一个都搞定了。最出乎意料地在于他被连带着气闸室一起炸飞的这一段，我本以为他过上了吃土豆的小康生活快乐无忧只等想办法开车出发了，然后晚上就boom了，马克在EVA氧气会不足的情况下硬是自己把气闸室顶回了栖息仓，电影里把这一段修改了，可能是限于篇幅长度吧，之后的这种删改也有，比如穿越沙暴和快到达目标时侧翻在了陨石坑中的情节，所以我就要说了，看电影前不要看小说，电影难免会有删改，先看原著后再看电影，会把期望拉得更高一点，不否认电影的精彩，但是我看的时候就会因为少的一些剧情感到遗憾。因为在故事展现的是一个人类在这种孤独和困难的情况下，依然渴望生命，充满希望的情景，每一个阻碍主角的困难，都是对人类不屈意志的进一步体现。所以下次一定先看电影再看小说。</p>
<p>我很喜欢马克这个角色，上面也说到他是嘴上喊着卧槽，但还是认真解决问题，气闸室被炸了后，他的日志里就是<code>我死定了</code>这种话，然后第二篇日志就开始说自己要重新做人干翻火星，看到这样的地方总是被逗笑，觉得太有意思了，最喜欢的还是他和地球建立连接后的通讯中的一段向全世界转发</p>
<blockquote>
<p>嘿！看这有一对大奶子—–&gt;(·Y·）</p>
</blockquote>
<p>真是太会玩了！当然他在火星也是孤独的，说不在第一次和地球建立连接成功的时候也会痛哭出来，但是平常就是一个我们所说的段子手，也许就是他这样的性格让他一个人在火星上撑过了这么多天，能够冷静的计算各种数据，将自己活下去的机会量化出来，这才是理工科的骄傲（可是我数学烂啊呵呵）</p>
<p>说一个我认为是电影里的小彩蛋，看过魔戒的也肯定一眼就知道了<br><strong><code>波若莫再一次参加了埃尔隆德会议！</code></strong></p>
<p>宾叔也是从大叔变成了更老的大叔了啊。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>趁着周五没课马上跑去看，好早之前就听说火星救援的宣传和评价如何如何好，是一部硬科幻电影，我这种半吊子科幻迷自然也是感兴趣很久了，然后闲逛亚马逊的时候想着不如把原著先看了吧（埋下了坑），于是就买了<a href="http://www.amazon.cn/%E7%81%AB%E6%98%9F%E6%95%91%E6%8F%B4-%EF%BC%BB%E7%BE%8E%E5%9B%BD%EF%BC%BD%E5%AE%89%E8%BF%AA%C2%B7%E5%A8%81%E5%B0%94/dp/B0154K86WY/ref=sr_1_1?ie=UTF8&amp;qid=1448706762&amp;sr=8-1&amp;keywords=%E7%81%AB%E6%98%9F%E6%95%91%E6%8F%B4+kindle" title="火星救援的Kindle电子书">火星救援的的kindle电子书</a>（10块原价还是略贵啊，电影上映都不打个折），看了三天就看完了，整体来说小说不长，不过如果对于一些基本科学概念不清楚的话可能稍微费点力气吧，看完电影和书的感觉就是这确实是一本够硬的科幻作品，在微博上也看到了对作者的介绍，想不到竟然参加了魔兽争霸2的开发！+10分！<br>]]>
    
    </summary>
    
      <category term="书" scheme="http://yoursite.com/tags/%E4%B9%A6/"/>
    
      <category term="电影" scheme="http://yoursite.com/tags/%E7%94%B5%E5%BD%B1/"/>
    
      <category term="写写画画" scheme="http://yoursite.com/categories/%E5%86%99%E5%86%99%E7%94%BB%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2015/11/21/hello-world/"/>
    <id>http://yoursite.com/2015/11/21/hello-world/</id>
    <published>2015-11-21T10:05:56.275Z</published>
    <updated>2015-11-21T10:05:56.275Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a><br><a id="more"></a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html">Writing</a><br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[回溯法的练习]]></title>
    <link href="http://yoursite.com/2015/11/17/2015-11-17-backtracktraining/"/>
    <id>http://yoursite.com/2015/11/17/2015-11-17-backtracktraining/</id>
    <published>2015-11-17T06:11:55.000Z</published>
    <updated>2015-11-21T09:58:24.433Z</updated>
    <content type="html"><![CDATA[<h3 id="问题">问题</h3><p>这是老师上课时提出的一个问题,在n*n的矩阵中，从一个顶点到与之相对的顶点，有多少条路径，其中前进的方向必然是总朝向目的顶点，而行进的路线只经过矩阵的一半，也就是说不是在整个矩阵中寻找路径。</p>
<h3 id="思路">思路</h3><p>用回溯法来实现，需要设计的是如何进行深度优先搜索，确定剪枝函数，对于其解空间树的确立也并不复杂，矩阵的行（row）就可以作为深度搜索的层数，核心思想其实还是深度搜索，然后没每一步都对当前结果进行评估，确定是否该往下继续搜索或者返回结果。假设一个4*4的矩阵，如图  </p>
<p>从这张图中可以很快得出，约束条件在于列号（j）总是大于或者等于行号（i）的。因为目标总是向着目标的方向前进，也就是不会向左和向后退。</p>
<a id="more"></a>
<h3 id="代码">代码</h3><p>基于以上的想法，实现关键的几个方法</p>
<p>首选是类中的变量定义<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;<span class="comment">//矩阵行列数，是所划分的方块数</span></span><br><span class="line"><span class="keyword">int</span> numberOfWays;<span class="comment">//路径的结果数</span></span><br><span class="line"><span class="keyword">int</span> temp;<span class="comment">//存放上一节点列数的变量</span></span><br></pre></td></tr></table></figure></p>
<p>接下来是主要方法<code>backTrack</code>的实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backTrack</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (i == n)</span><br><span class="line">		numberOfWays++;<span class="comment">//已经搜索到最深层</span></span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = temp; j &lt;= n; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (constraint(i, j)) &#123;</span><br><span class="line">				temp = j;<span class="comment">//将本层的列号保存到temp变量中</span></span><br><span class="line">				backTrack(i + <span class="number">1</span>);<span class="comment">//满足条件，继续向下搜索</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>约束函数</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">constraint</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (i &lt; j)</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>在这里只是实现了回溯法寻找可能了路径数的问题，既没有优化的问题，也不需要输出所有的路径结果，相比之下，回溯法在<strong>输出所有结果</strong>时才能发挥出它的价值。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="问题">问题</h3><p>这是老师上课时提出的一个问题,在n*n的矩阵中，从一个顶点到与之相对的顶点，有多少条路径，其中前进的方向必然是总朝向目的顶点，而行进的路线只经过矩阵的一半，也就是说不是在整个矩阵中寻找路径。</p>
<h3 id="思路">思路</h3><p>用回溯法来实现，需要设计的是如何进行深度优先搜索，确定剪枝函数，对于其解空间树的确立也并不复杂，矩阵的行（row）就可以作为深度搜索的层数，核心思想其实还是深度搜索，然后没每一步都对当前结果进行评估，确定是否该往下继续搜索或者返回结果。假设一个4*4的矩阵，如图  </p>
<p>从这张图中可以很快得出，约束条件在于列号（j）总是大于或者等于行号（i）的。因为目标总是向着目标的方向前进，也就是不会向左和向后退。</p>]]>
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[第一篇]]></title>
    <link href="http://yoursite.com/2015/10/25/2015-10-25-why/"/>
    <id>http://yoursite.com/2015/10/25/2015-10-25-why/</id>
    <published>2015-10-25T13:30:13.000Z</published>
    <updated>2015-11-21T10:05:24.521Z</updated>
    <content type="html"><![CDATA[<h2 id="为什么开了这样一个博客？">为什么开了这样一个博客？</h2><hr>
<p>以前是看着有的学长自己架了博客，搜索资料也多半都会搜到博客的内容，那时候对于博<br>客这个东西是没有什么概念，也觉得好像没什么必要，都流行微博了还要博客做什么呢？<br><a id="more"></a><br>但是在大三这个学期产生了“也许需要自己的一个博客”这样的想法，原因在于学的东西渐渐多起来，但是只是单单记在笔记本上或者印象笔记上，都是非常不方便的，一个是纸质的保存问题和不便携的缺点，印象笔记的排版和体验也一直是不行的（尤其要吐槽列表功能，一度想用印象笔记来取代keep作为TODO，但是打开速度和桌面插件显示都觉得不满意），所以想到：  </p>
<p>果然还是开一个博客来做一些阶段性的总结，或者对某些技术的分析思考比较好，剩下的原因，首页也提到会写一些乱七八糟的东西哈哈哈，当然也不会多么乱七八糟，就是觉得摆着这么多书看了完了然后就这么忘了也可惜的，要是闲写个什么 <strong><code>读后感</code></strong> 也未尝不可，电影亦然。  </p>
<h2 id="既然开了博客，那么多久写个东西呢？">既然开了博客，那么多久写个东西呢？</h2><hr>
<p>恩在看的东西也是一堆，争取一个星期写一篇关于某个正在学习的技术的思考和总结，比如最近在看的 <strong>Java语言程序设计（进阶）</strong> 和算法的一些问题，说实话算法这一类问题真是让我想破头了，我还想看看C++，想看的东西总是很多啊。  </p>
<p>总而言之，就是开了博客就要让这博客活下来。  </p>
<p>P.S.:  Markdown语法也是，貌似不能首行缩进。</p>
<h2 id="选择Octopress?">选择Octopress?</h2><hr>
<p>一开始想用wordpress,但是平常还是太懒了，然后也没有做深入了解和研究，恰好看到octopress的视频介绍，就跟着一路搭建过来了，感觉用这个搭建博客的人还是很少啊，谷歌相关的资料的时候，都是OS X或者Linux系统的方法，windows的方法少。打算之后的博文先写个如何windows环境下用Octopress搭建博客吧。<br>网上说wordpress有好有坏，说数据库管理只要崩了就扑街了，太过笨重之类的种种，反正我这偷懒先找到这个方法就先用这个搭建了吧，以后有机会再去摸一下wordpress哈哈。</p>
<p><code>2015/11/21 18:02:33更新</code></p>
<p>现在已经换成了hexo，一来是基于Node.js的这么潮流的东西确实很有趣，可以顺便学习下，而且octopress的codeblock功能谜一样的失灵了，作者更新也是很久之前的事情了，所以就用hexo了吧！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="为什么开了这样一个博客？">为什么开了这样一个博客？</h2><hr>
<p>以前是看着有的学长自己架了博客，搜索资料也多半都会搜到博客的内容，那时候对于博<br>客这个东西是没有什么概念，也觉得好像没什么必要，都流行微博了还要博客做什么呢？<br>]]>
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
</feed>
